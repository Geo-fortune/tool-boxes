// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calibration.proto

#include "calibration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_calibration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calibration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraCalibParams;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calibration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LidarCalibParams;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calibration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MarkerBoardParmas;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calibration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RosbagParams;
}  // namespace protobuf_calibration_2eproto
namespace calibration {
class ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config>
      _instance;
} _Config_default_instance_;
class RosbagParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RosbagParams>
      _instance;
} _RosbagParams_default_instance_;
class LidarCalibParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarCalibParams>
      _instance;
} _LidarCalibParams_default_instance_;
class CameraCalibParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraCalibParams>
      _instance;
} _CameraCalibParams_default_instance_;
class MarkerBoardParmasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarkerBoardParmas>
      _instance;
} _MarkerBoardParmas_default_instance_;
}  // namespace calibration
namespace protobuf_calibration_2eproto {
static void InitDefaultsConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calibration::_Config_default_instance_;
    new (ptr) ::calibration::Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calibration::Config::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Config =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsConfig}, {
      &protobuf_calibration_2eproto::scc_info_RosbagParams.base,
      &protobuf_calibration_2eproto::scc_info_LidarCalibParams.base,
      &protobuf_calibration_2eproto::scc_info_CameraCalibParams.base,
      &protobuf_calibration_2eproto::scc_info_MarkerBoardParmas.base,}};

static void InitDefaultsRosbagParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calibration::_RosbagParams_default_instance_;
    new (ptr) ::calibration::RosbagParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calibration::RosbagParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RosbagParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRosbagParams}, {}};

static void InitDefaultsLidarCalibParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calibration::_LidarCalibParams_default_instance_;
    new (ptr) ::calibration::LidarCalibParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calibration::LidarCalibParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LidarCalibParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLidarCalibParams}, {}};

static void InitDefaultsCameraCalibParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calibration::_CameraCalibParams_default_instance_;
    new (ptr) ::calibration::CameraCalibParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calibration::CameraCalibParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CameraCalibParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraCalibParams}, {}};

static void InitDefaultsMarkerBoardParmas() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calibration::_MarkerBoardParmas_default_instance_;
    new (ptr) ::calibration::MarkerBoardParmas();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calibration::MarkerBoardParmas::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarkerBoardParmas =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarkerBoardParmas}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Config.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RosbagParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LidarCalibParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraCalibParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarkerBoardParmas.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::Config, use_rosbag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::Config, rosbag_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::Config, lidar_calib_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::Config, camera_calib_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::Config, marker_board_params_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::RosbagParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::RosbagParams, bag_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::RosbagParams, save_pth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::RosbagParams, image_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::RosbagParams, cloud_topic_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::LidarCalibParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::LidarCalibParams, image_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::LidarCalibParams, xyz_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::LidarCalibParams, intensity_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::LidarCalibParams, marker_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::LidarCalibParams, use_camera_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::LidarCalibParams, project_matrix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::LidarCalibParams, iteration_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::LidarCalibParams, lidar_init_rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::LidarCalibParams, lidar_origin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::CameraCalibParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::CameraCalibParams, camera_config_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::MarkerBoardParmas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::MarkerBoardParmas, marker_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::MarkerBoardParmas, board_length_e1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::MarkerBoardParmas, board_length_e2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::MarkerBoardParmas, board_length_b1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::MarkerBoardParmas, board_length_b2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calibration::MarkerBoardParmas, marker_length_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::calibration::Config)},
  { 10, -1, sizeof(::calibration::RosbagParams)},
  { 19, -1, sizeof(::calibration::LidarCalibParams)},
  { 33, -1, sizeof(::calibration::CameraCalibParams)},
  { 39, -1, sizeof(::calibration::MarkerBoardParmas)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::calibration::_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calibration::_RosbagParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calibration::_LidarCalibParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calibration::_CameraCalibParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calibration::_MarkerBoardParmas_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "calibration.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021calibration.proto\022\013calibration\"\203\002\n\006Con"
      "fig\022\022\n\nuse_rosbag\030\001 \001(\010\0220\n\rrosbag_params"
      "\030\002 \001(\0132\031.calibration.RosbagParams\0229\n\022lid"
      "ar_calib_params\030\003 \001(\0132\035.calibration.Lida"
      "rCalibParams\022;\n\023camera_calib_params\030\004 \001("
      "\0132\036.calibration.CameraCalibParams\022;\n\023mar"
      "ker_board_params\030\005 \001(\0132\036.calibration.Mar"
      "kerBoardParmas\"\\\n\014RosbagParams\022\020\n\010bag_fi"
      "le\030\001 \001(\t\022\020\n\010save_pth\030\002 \001(\t\022\023\n\013image_topi"
      "c\030\003 \001(\t\022\023\n\013cloud_topic\030\004 \001(\t\"\344\001\n\020LidarCa"
      "libParams\022\022\n\nimage_size\030\001 \003(\005\022\021\n\txyz_ran"
      "ge\030\002 \003(\002\022\033\n\023intensity_threshold\030\003 \001(\002\022\024\n"
      "\014marker_count\030\004 \001(\005\022\027\n\017use_camera_info\030\005"
      " \001(\010\022\026\n\016project_matrix\030\006 \003(\002\022\027\n\017iteratio"
      "n_count\030\007 \001(\005\022\026\n\016lidar_init_rot\030\010 \003(\002\022\024\n"
      "\014lidar_origin\030\t \003(\002\"/\n\021CameraCalibParams"
      "\022\032\n\022camera_config_path\030\001 \001(\t\"\245\001\n\021MarkerB"
      "oardParmas\022\025\n\rmarker_number\030\001 \001(\005\022\027\n\017boa"
      "rd_length_e1\030\002 \001(\002\022\027\n\017board_length_e2\030\003 "
      "\001(\002\022\027\n\017board_length_b1\030\004 \001(\002\022\027\n\017board_le"
      "ngth_b2\030\005 \001(\002\022\025\n\rmarker_length\030\006 \001(\002b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 844);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "calibration.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_calibration_2eproto
namespace calibration {

// ===================================================================

void Config::InitAsDefaultInstance() {
  ::calibration::_Config_default_instance_._instance.get_mutable()->rosbag_params_ = const_cast< ::calibration::RosbagParams*>(
      ::calibration::RosbagParams::internal_default_instance());
  ::calibration::_Config_default_instance_._instance.get_mutable()->lidar_calib_params_ = const_cast< ::calibration::LidarCalibParams*>(
      ::calibration::LidarCalibParams::internal_default_instance());
  ::calibration::_Config_default_instance_._instance.get_mutable()->camera_calib_params_ = const_cast< ::calibration::CameraCalibParams*>(
      ::calibration::CameraCalibParams::internal_default_instance());
  ::calibration::_Config_default_instance_._instance.get_mutable()->marker_board_params_ = const_cast< ::calibration::MarkerBoardParmas*>(
      ::calibration::MarkerBoardParmas::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kUseRosbagFieldNumber;
const int Config::kRosbagParamsFieldNumber;
const int Config::kLidarCalibParamsFieldNumber;
const int Config::kCameraCalibParamsFieldNumber;
const int Config::kMarkerBoardParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_calibration_2eproto::scc_info_Config.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calibration.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rosbag_params()) {
    rosbag_params_ = new ::calibration::RosbagParams(*from.rosbag_params_);
  } else {
    rosbag_params_ = NULL;
  }
  if (from.has_lidar_calib_params()) {
    lidar_calib_params_ = new ::calibration::LidarCalibParams(*from.lidar_calib_params_);
  } else {
    lidar_calib_params_ = NULL;
  }
  if (from.has_camera_calib_params()) {
    camera_calib_params_ = new ::calibration::CameraCalibParams(*from.camera_calib_params_);
  } else {
    camera_calib_params_ = NULL;
  }
  if (from.has_marker_board_params()) {
    marker_board_params_ = new ::calibration::MarkerBoardParmas(*from.marker_board_params_);
  } else {
    marker_board_params_ = NULL;
  }
  use_rosbag_ = from.use_rosbag_;
  // @@protoc_insertion_point(copy_constructor:calibration.Config)
}

void Config::SharedCtor() {
  ::memset(&rosbag_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_rosbag_) -
      reinterpret_cast<char*>(&rosbag_params_)) + sizeof(use_rosbag_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:calibration.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != internal_default_instance()) delete rosbag_params_;
  if (this != internal_default_instance()) delete lidar_calib_params_;
  if (this != internal_default_instance()) delete camera_calib_params_;
  if (this != internal_default_instance()) delete marker_board_params_;
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  ::protobuf_calibration_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config& Config::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_calibration_2eproto::scc_info_Config.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:calibration.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && rosbag_params_ != NULL) {
    delete rosbag_params_;
  }
  rosbag_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && lidar_calib_params_ != NULL) {
    delete lidar_calib_params_;
  }
  lidar_calib_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && camera_calib_params_ != NULL) {
    delete camera_calib_params_;
  }
  camera_calib_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && marker_board_params_ != NULL) {
    delete marker_board_params_;
  }
  marker_board_params_ = NULL;
  use_rosbag_ = false;
  _internal_metadata_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calibration.Config)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool use_rosbag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_rosbag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calibration.RosbagParams rosbag_params = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rosbag_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calibration.LidarCalibParams lidar_calib_params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lidar_calib_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calibration.CameraCalibParams camera_calib_params = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_calib_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calibration.MarkerBoardParmas marker_board_params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_marker_board_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calibration.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calibration.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calibration.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_rosbag = 1;
  if (this->use_rosbag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_rosbag(), output);
  }

  // .calibration.RosbagParams rosbag_params = 2;
  if (this->has_rosbag_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_rosbag_params(), output);
  }

  // .calibration.LidarCalibParams lidar_calib_params = 3;
  if (this->has_lidar_calib_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_lidar_calib_params(), output);
  }

  // .calibration.CameraCalibParams camera_calib_params = 4;
  if (this->has_camera_calib_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_camera_calib_params(), output);
  }

  // .calibration.MarkerBoardParmas marker_board_params = 5;
  if (this->has_marker_board_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_marker_board_params(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calibration.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calibration.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_rosbag = 1;
  if (this->use_rosbag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_rosbag(), target);
  }

  // .calibration.RosbagParams rosbag_params = 2;
  if (this->has_rosbag_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_rosbag_params(), deterministic, target);
  }

  // .calibration.LidarCalibParams lidar_calib_params = 3;
  if (this->has_lidar_calib_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_lidar_calib_params(), deterministic, target);
  }

  // .calibration.CameraCalibParams camera_calib_params = 4;
  if (this->has_camera_calib_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_camera_calib_params(), deterministic, target);
  }

  // .calibration.MarkerBoardParmas marker_board_params = 5;
  if (this->has_marker_board_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_marker_board_params(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calibration.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calibration.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calibration.RosbagParams rosbag_params = 2;
  if (this->has_rosbag_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rosbag_params_);
  }

  // .calibration.LidarCalibParams lidar_calib_params = 3;
  if (this->has_lidar_calib_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lidar_calib_params_);
  }

  // .calibration.CameraCalibParams camera_calib_params = 4;
  if (this->has_camera_calib_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_calib_params_);
  }

  // .calibration.MarkerBoardParmas marker_board_params = 5;
  if (this->has_marker_board_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *marker_board_params_);
  }

  // bool use_rosbag = 1;
  if (this->use_rosbag() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calibration.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calibration.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calibration.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calibration.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rosbag_params()) {
    mutable_rosbag_params()->::calibration::RosbagParams::MergeFrom(from.rosbag_params());
  }
  if (from.has_lidar_calib_params()) {
    mutable_lidar_calib_params()->::calibration::LidarCalibParams::MergeFrom(from.lidar_calib_params());
  }
  if (from.has_camera_calib_params()) {
    mutable_camera_calib_params()->::calibration::CameraCalibParams::MergeFrom(from.camera_calib_params());
  }
  if (from.has_marker_board_params()) {
    mutable_marker_board_params()->::calibration::MarkerBoardParmas::MergeFrom(from.marker_board_params());
  }
  if (from.use_rosbag() != 0) {
    set_use_rosbag(from.use_rosbag());
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calibration.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calibration.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  using std::swap;
  swap(rosbag_params_, other->rosbag_params_);
  swap(lidar_calib_params_, other->lidar_calib_params_);
  swap(camera_calib_params_, other->camera_calib_params_);
  swap(marker_board_params_, other->marker_board_params_);
  swap(use_rosbag_, other->use_rosbag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_calibration_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RosbagParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RosbagParams::kBagFileFieldNumber;
const int RosbagParams::kSavePthFieldNumber;
const int RosbagParams::kImageTopicFieldNumber;
const int RosbagParams::kCloudTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RosbagParams::RosbagParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_calibration_2eproto::scc_info_RosbagParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calibration.RosbagParams)
}
RosbagParams::RosbagParams(const RosbagParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bag_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bag_file().size() > 0) {
    bag_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bag_file_);
  }
  save_pth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.save_pth().size() > 0) {
    save_pth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_pth_);
  }
  image_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_topic().size() > 0) {
    image_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_topic_);
  }
  cloud_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cloud_topic().size() > 0) {
    cloud_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cloud_topic_);
  }
  // @@protoc_insertion_point(copy_constructor:calibration.RosbagParams)
}

void RosbagParams::SharedCtor() {
  bag_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_pth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cloud_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RosbagParams::~RosbagParams() {
  // @@protoc_insertion_point(destructor:calibration.RosbagParams)
  SharedDtor();
}

void RosbagParams::SharedDtor() {
  bag_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_pth_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cloud_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RosbagParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RosbagParams::descriptor() {
  ::protobuf_calibration_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RosbagParams& RosbagParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_calibration_2eproto::scc_info_RosbagParams.base);
  return *internal_default_instance();
}


void RosbagParams::Clear() {
// @@protoc_insertion_point(message_clear_start:calibration.RosbagParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bag_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_pth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cloud_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RosbagParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calibration.RosbagParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bag_file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bag_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bag_file().data(), static_cast<int>(this->bag_file().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calibration.RosbagParams.bag_file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string save_pth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_pth()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->save_pth().data(), static_cast<int>(this->save_pth().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calibration.RosbagParams.save_pth"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image_topic = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_topic().data(), static_cast<int>(this->image_topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calibration.RosbagParams.image_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cloud_topic = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cloud_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cloud_topic().data(), static_cast<int>(this->cloud_topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calibration.RosbagParams.cloud_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calibration.RosbagParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calibration.RosbagParams)
  return false;
#undef DO_
}

void RosbagParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calibration.RosbagParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bag_file = 1;
  if (this->bag_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bag_file().data(), static_cast<int>(this->bag_file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calibration.RosbagParams.bag_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bag_file(), output);
  }

  // string save_pth = 2;
  if (this->save_pth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->save_pth().data(), static_cast<int>(this->save_pth().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calibration.RosbagParams.save_pth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->save_pth(), output);
  }

  // string image_topic = 3;
  if (this->image_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_topic().data(), static_cast<int>(this->image_topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calibration.RosbagParams.image_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image_topic(), output);
  }

  // string cloud_topic = 4;
  if (this->cloud_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cloud_topic().data(), static_cast<int>(this->cloud_topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calibration.RosbagParams.cloud_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cloud_topic(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calibration.RosbagParams)
}

::google::protobuf::uint8* RosbagParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calibration.RosbagParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bag_file = 1;
  if (this->bag_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bag_file().data(), static_cast<int>(this->bag_file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calibration.RosbagParams.bag_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bag_file(), target);
  }

  // string save_pth = 2;
  if (this->save_pth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->save_pth().data(), static_cast<int>(this->save_pth().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calibration.RosbagParams.save_pth");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->save_pth(), target);
  }

  // string image_topic = 3;
  if (this->image_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_topic().data(), static_cast<int>(this->image_topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calibration.RosbagParams.image_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image_topic(), target);
  }

  // string cloud_topic = 4;
  if (this->cloud_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cloud_topic().data(), static_cast<int>(this->cloud_topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calibration.RosbagParams.cloud_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cloud_topic(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calibration.RosbagParams)
  return target;
}

size_t RosbagParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calibration.RosbagParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string bag_file = 1;
  if (this->bag_file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bag_file());
  }

  // string save_pth = 2;
  if (this->save_pth().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->save_pth());
  }

  // string image_topic = 3;
  if (this->image_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_topic());
  }

  // string cloud_topic = 4;
  if (this->cloud_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cloud_topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RosbagParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calibration.RosbagParams)
  GOOGLE_DCHECK_NE(&from, this);
  const RosbagParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RosbagParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calibration.RosbagParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calibration.RosbagParams)
    MergeFrom(*source);
  }
}

void RosbagParams::MergeFrom(const RosbagParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calibration.RosbagParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bag_file().size() > 0) {

    bag_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bag_file_);
  }
  if (from.save_pth().size() > 0) {

    save_pth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_pth_);
  }
  if (from.image_topic().size() > 0) {

    image_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_topic_);
  }
  if (from.cloud_topic().size() > 0) {

    cloud_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cloud_topic_);
  }
}

void RosbagParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calibration.RosbagParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RosbagParams::CopyFrom(const RosbagParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calibration.RosbagParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RosbagParams::IsInitialized() const {
  return true;
}

void RosbagParams::Swap(RosbagParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RosbagParams::InternalSwap(RosbagParams* other) {
  using std::swap;
  bag_file_.Swap(&other->bag_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  save_pth_.Swap(&other->save_pth_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_topic_.Swap(&other->image_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cloud_topic_.Swap(&other->cloud_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RosbagParams::GetMetadata() const {
  protobuf_calibration_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarCalibParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarCalibParams::kImageSizeFieldNumber;
const int LidarCalibParams::kXyzRangeFieldNumber;
const int LidarCalibParams::kIntensityThresholdFieldNumber;
const int LidarCalibParams::kMarkerCountFieldNumber;
const int LidarCalibParams::kUseCameraInfoFieldNumber;
const int LidarCalibParams::kProjectMatrixFieldNumber;
const int LidarCalibParams::kIterationCountFieldNumber;
const int LidarCalibParams::kLidarInitRotFieldNumber;
const int LidarCalibParams::kLidarOriginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarCalibParams::LidarCalibParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_calibration_2eproto::scc_info_LidarCalibParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calibration.LidarCalibParams)
}
LidarCalibParams::LidarCalibParams(const LidarCalibParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_size_(from.image_size_),
      xyz_range_(from.xyz_range_),
      project_matrix_(from.project_matrix_),
      lidar_init_rot_(from.lidar_init_rot_),
      lidar_origin_(from.lidar_origin_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&intensity_threshold_, &from.intensity_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&iteration_count_) -
    reinterpret_cast<char*>(&intensity_threshold_)) + sizeof(iteration_count_));
  // @@protoc_insertion_point(copy_constructor:calibration.LidarCalibParams)
}

void LidarCalibParams::SharedCtor() {
  ::memset(&intensity_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iteration_count_) -
      reinterpret_cast<char*>(&intensity_threshold_)) + sizeof(iteration_count_));
}

LidarCalibParams::~LidarCalibParams() {
  // @@protoc_insertion_point(destructor:calibration.LidarCalibParams)
  SharedDtor();
}

void LidarCalibParams::SharedDtor() {
}

void LidarCalibParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LidarCalibParams::descriptor() {
  ::protobuf_calibration_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarCalibParams& LidarCalibParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_calibration_2eproto::scc_info_LidarCalibParams.base);
  return *internal_default_instance();
}


void LidarCalibParams::Clear() {
// @@protoc_insertion_point(message_clear_start:calibration.LidarCalibParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_size_.Clear();
  xyz_range_.Clear();
  project_matrix_.Clear();
  lidar_init_rot_.Clear();
  lidar_origin_.Clear();
  ::memset(&intensity_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iteration_count_) -
      reinterpret_cast<char*>(&intensity_threshold_)) + sizeof(iteration_count_));
  _internal_metadata_.Clear();
}

bool LidarCalibParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calibration.LidarCalibParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 image_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_image_size())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_image_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float xyz_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_xyz_range())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_xyz_range())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float intensity_threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 marker_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marker_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_camera_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_camera_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float project_matrix = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_project_matrix())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_project_matrix())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 iteration_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iteration_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float lidar_init_rot = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lidar_init_rot())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66u, input, this->mutable_lidar_init_rot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float lidar_origin = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lidar_origin())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_lidar_origin())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calibration.LidarCalibParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calibration.LidarCalibParams)
  return false;
#undef DO_
}

void LidarCalibParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calibration.LidarCalibParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 image_size = 1;
  if (this->image_size_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _image_size_cached_byte_size_));
  }
  for (int i = 0, n = this->image_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->image_size(i), output);
  }

  // repeated float xyz_range = 2;
  if (this->xyz_range_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _xyz_range_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->xyz_range().data(), this->xyz_range_size(), output);
  }

  // float intensity_threshold = 3;
  if (this->intensity_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->intensity_threshold(), output);
  }

  // int32 marker_count = 4;
  if (this->marker_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->marker_count(), output);
  }

  // bool use_camera_info = 5;
  if (this->use_camera_info() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_camera_info(), output);
  }

  // repeated float project_matrix = 6;
  if (this->project_matrix_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _project_matrix_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->project_matrix().data(), this->project_matrix_size(), output);
  }

  // int32 iteration_count = 7;
  if (this->iteration_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->iteration_count(), output);
  }

  // repeated float lidar_init_rot = 8;
  if (this->lidar_init_rot_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _lidar_init_rot_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->lidar_init_rot().data(), this->lidar_init_rot_size(), output);
  }

  // repeated float lidar_origin = 9;
  if (this->lidar_origin_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _lidar_origin_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->lidar_origin().data(), this->lidar_origin_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calibration.LidarCalibParams)
}

::google::protobuf::uint8* LidarCalibParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calibration.LidarCalibParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 image_size = 1;
  if (this->image_size_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _image_size_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->image_size_, target);
  }

  // repeated float xyz_range = 2;
  if (this->xyz_range_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _xyz_range_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->xyz_range_, target);
  }

  // float intensity_threshold = 3;
  if (this->intensity_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->intensity_threshold(), target);
  }

  // int32 marker_count = 4;
  if (this->marker_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->marker_count(), target);
  }

  // bool use_camera_info = 5;
  if (this->use_camera_info() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_camera_info(), target);
  }

  // repeated float project_matrix = 6;
  if (this->project_matrix_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _project_matrix_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->project_matrix_, target);
  }

  // int32 iteration_count = 7;
  if (this->iteration_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->iteration_count(), target);
  }

  // repeated float lidar_init_rot = 8;
  if (this->lidar_init_rot_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _lidar_init_rot_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->lidar_init_rot_, target);
  }

  // repeated float lidar_origin = 9;
  if (this->lidar_origin_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _lidar_origin_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->lidar_origin_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calibration.LidarCalibParams)
  return target;
}

size_t LidarCalibParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calibration.LidarCalibParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 image_size = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->image_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _image_size_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float xyz_range = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->xyz_range_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _xyz_range_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float project_matrix = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->project_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _project_matrix_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float lidar_init_rot = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->lidar_init_rot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lidar_init_rot_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float lidar_origin = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->lidar_origin_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lidar_origin_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float intensity_threshold = 3;
  if (this->intensity_threshold() != 0) {
    total_size += 1 + 4;
  }

  // int32 marker_count = 4;
  if (this->marker_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->marker_count());
  }

  // bool use_camera_info = 5;
  if (this->use_camera_info() != 0) {
    total_size += 1 + 1;
  }

  // int32 iteration_count = 7;
  if (this->iteration_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iteration_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarCalibParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calibration.LidarCalibParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarCalibParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarCalibParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calibration.LidarCalibParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calibration.LidarCalibParams)
    MergeFrom(*source);
  }
}

void LidarCalibParams::MergeFrom(const LidarCalibParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calibration.LidarCalibParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_size_.MergeFrom(from.image_size_);
  xyz_range_.MergeFrom(from.xyz_range_);
  project_matrix_.MergeFrom(from.project_matrix_);
  lidar_init_rot_.MergeFrom(from.lidar_init_rot_);
  lidar_origin_.MergeFrom(from.lidar_origin_);
  if (from.intensity_threshold() != 0) {
    set_intensity_threshold(from.intensity_threshold());
  }
  if (from.marker_count() != 0) {
    set_marker_count(from.marker_count());
  }
  if (from.use_camera_info() != 0) {
    set_use_camera_info(from.use_camera_info());
  }
  if (from.iteration_count() != 0) {
    set_iteration_count(from.iteration_count());
  }
}

void LidarCalibParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calibration.LidarCalibParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarCalibParams::CopyFrom(const LidarCalibParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calibration.LidarCalibParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarCalibParams::IsInitialized() const {
  return true;
}

void LidarCalibParams::Swap(LidarCalibParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarCalibParams::InternalSwap(LidarCalibParams* other) {
  using std::swap;
  image_size_.InternalSwap(&other->image_size_);
  xyz_range_.InternalSwap(&other->xyz_range_);
  project_matrix_.InternalSwap(&other->project_matrix_);
  lidar_init_rot_.InternalSwap(&other->lidar_init_rot_);
  lidar_origin_.InternalSwap(&other->lidar_origin_);
  swap(intensity_threshold_, other->intensity_threshold_);
  swap(marker_count_, other->marker_count_);
  swap(use_camera_info_, other->use_camera_info_);
  swap(iteration_count_, other->iteration_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LidarCalibParams::GetMetadata() const {
  protobuf_calibration_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraCalibParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraCalibParams::kCameraConfigPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraCalibParams::CameraCalibParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_calibration_2eproto::scc_info_CameraCalibParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calibration.CameraCalibParams)
}
CameraCalibParams::CameraCalibParams(const CameraCalibParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  camera_config_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.camera_config_path().size() > 0) {
    camera_config_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_config_path_);
  }
  // @@protoc_insertion_point(copy_constructor:calibration.CameraCalibParams)
}

void CameraCalibParams::SharedCtor() {
  camera_config_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CameraCalibParams::~CameraCalibParams() {
  // @@protoc_insertion_point(destructor:calibration.CameraCalibParams)
  SharedDtor();
}

void CameraCalibParams::SharedDtor() {
  camera_config_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CameraCalibParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraCalibParams::descriptor() {
  ::protobuf_calibration_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraCalibParams& CameraCalibParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_calibration_2eproto::scc_info_CameraCalibParams.base);
  return *internal_default_instance();
}


void CameraCalibParams::Clear() {
// @@protoc_insertion_point(message_clear_start:calibration.CameraCalibParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_config_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CameraCalibParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calibration.CameraCalibParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string camera_config_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_config_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->camera_config_path().data(), static_cast<int>(this->camera_config_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calibration.CameraCalibParams.camera_config_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calibration.CameraCalibParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calibration.CameraCalibParams)
  return false;
#undef DO_
}

void CameraCalibParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calibration.CameraCalibParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_config_path = 1;
  if (this->camera_config_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camera_config_path().data(), static_cast<int>(this->camera_config_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calibration.CameraCalibParams.camera_config_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->camera_config_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calibration.CameraCalibParams)
}

::google::protobuf::uint8* CameraCalibParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calibration.CameraCalibParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_config_path = 1;
  if (this->camera_config_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->camera_config_path().data(), static_cast<int>(this->camera_config_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calibration.CameraCalibParams.camera_config_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->camera_config_path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calibration.CameraCalibParams)
  return target;
}

size_t CameraCalibParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calibration.CameraCalibParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string camera_config_path = 1;
  if (this->camera_config_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->camera_config_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraCalibParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calibration.CameraCalibParams)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraCalibParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraCalibParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calibration.CameraCalibParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calibration.CameraCalibParams)
    MergeFrom(*source);
  }
}

void CameraCalibParams::MergeFrom(const CameraCalibParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calibration.CameraCalibParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_config_path().size() > 0) {

    camera_config_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_config_path_);
  }
}

void CameraCalibParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calibration.CameraCalibParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalibParams::CopyFrom(const CameraCalibParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calibration.CameraCalibParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibParams::IsInitialized() const {
  return true;
}

void CameraCalibParams::Swap(CameraCalibParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraCalibParams::InternalSwap(CameraCalibParams* other) {
  using std::swap;
  camera_config_path_.Swap(&other->camera_config_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraCalibParams::GetMetadata() const {
  protobuf_calibration_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarkerBoardParmas::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkerBoardParmas::kMarkerNumberFieldNumber;
const int MarkerBoardParmas::kBoardLengthE1FieldNumber;
const int MarkerBoardParmas::kBoardLengthE2FieldNumber;
const int MarkerBoardParmas::kBoardLengthB1FieldNumber;
const int MarkerBoardParmas::kBoardLengthB2FieldNumber;
const int MarkerBoardParmas::kMarkerLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkerBoardParmas::MarkerBoardParmas()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_calibration_2eproto::scc_info_MarkerBoardParmas.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calibration.MarkerBoardParmas)
}
MarkerBoardParmas::MarkerBoardParmas(const MarkerBoardParmas& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&marker_number_, &from.marker_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&marker_length_) -
    reinterpret_cast<char*>(&marker_number_)) + sizeof(marker_length_));
  // @@protoc_insertion_point(copy_constructor:calibration.MarkerBoardParmas)
}

void MarkerBoardParmas::SharedCtor() {
  ::memset(&marker_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marker_length_) -
      reinterpret_cast<char*>(&marker_number_)) + sizeof(marker_length_));
}

MarkerBoardParmas::~MarkerBoardParmas() {
  // @@protoc_insertion_point(destructor:calibration.MarkerBoardParmas)
  SharedDtor();
}

void MarkerBoardParmas::SharedDtor() {
}

void MarkerBoardParmas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarkerBoardParmas::descriptor() {
  ::protobuf_calibration_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkerBoardParmas& MarkerBoardParmas::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_calibration_2eproto::scc_info_MarkerBoardParmas.base);
  return *internal_default_instance();
}


void MarkerBoardParmas::Clear() {
// @@protoc_insertion_point(message_clear_start:calibration.MarkerBoardParmas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&marker_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marker_length_) -
      reinterpret_cast<char*>(&marker_number_)) + sizeof(marker_length_));
  _internal_metadata_.Clear();
}

bool MarkerBoardParmas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calibration.MarkerBoardParmas)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 marker_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marker_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float board_length_e1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &board_length_e1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float board_length_e2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &board_length_e2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float board_length_b1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &board_length_b1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float board_length_b2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &board_length_b2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float marker_length = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &marker_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calibration.MarkerBoardParmas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calibration.MarkerBoardParmas)
  return false;
#undef DO_
}

void MarkerBoardParmas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calibration.MarkerBoardParmas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 marker_number = 1;
  if (this->marker_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->marker_number(), output);
  }

  // float board_length_e1 = 2;
  if (this->board_length_e1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->board_length_e1(), output);
  }

  // float board_length_e2 = 3;
  if (this->board_length_e2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->board_length_e2(), output);
  }

  // float board_length_b1 = 4;
  if (this->board_length_b1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->board_length_b1(), output);
  }

  // float board_length_b2 = 5;
  if (this->board_length_b2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->board_length_b2(), output);
  }

  // float marker_length = 6;
  if (this->marker_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->marker_length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calibration.MarkerBoardParmas)
}

::google::protobuf::uint8* MarkerBoardParmas::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calibration.MarkerBoardParmas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 marker_number = 1;
  if (this->marker_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->marker_number(), target);
  }

  // float board_length_e1 = 2;
  if (this->board_length_e1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->board_length_e1(), target);
  }

  // float board_length_e2 = 3;
  if (this->board_length_e2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->board_length_e2(), target);
  }

  // float board_length_b1 = 4;
  if (this->board_length_b1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->board_length_b1(), target);
  }

  // float board_length_b2 = 5;
  if (this->board_length_b2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->board_length_b2(), target);
  }

  // float marker_length = 6;
  if (this->marker_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->marker_length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calibration.MarkerBoardParmas)
  return target;
}

size_t MarkerBoardParmas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calibration.MarkerBoardParmas)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 marker_number = 1;
  if (this->marker_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->marker_number());
  }

  // float board_length_e1 = 2;
  if (this->board_length_e1() != 0) {
    total_size += 1 + 4;
  }

  // float board_length_e2 = 3;
  if (this->board_length_e2() != 0) {
    total_size += 1 + 4;
  }

  // float board_length_b1 = 4;
  if (this->board_length_b1() != 0) {
    total_size += 1 + 4;
  }

  // float board_length_b2 = 5;
  if (this->board_length_b2() != 0) {
    total_size += 1 + 4;
  }

  // float marker_length = 6;
  if (this->marker_length() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarkerBoardParmas::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calibration.MarkerBoardParmas)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkerBoardParmas* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkerBoardParmas>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calibration.MarkerBoardParmas)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calibration.MarkerBoardParmas)
    MergeFrom(*source);
  }
}

void MarkerBoardParmas::MergeFrom(const MarkerBoardParmas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calibration.MarkerBoardParmas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marker_number() != 0) {
    set_marker_number(from.marker_number());
  }
  if (from.board_length_e1() != 0) {
    set_board_length_e1(from.board_length_e1());
  }
  if (from.board_length_e2() != 0) {
    set_board_length_e2(from.board_length_e2());
  }
  if (from.board_length_b1() != 0) {
    set_board_length_b1(from.board_length_b1());
  }
  if (from.board_length_b2() != 0) {
    set_board_length_b2(from.board_length_b2());
  }
  if (from.marker_length() != 0) {
    set_marker_length(from.marker_length());
  }
}

void MarkerBoardParmas::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calibration.MarkerBoardParmas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkerBoardParmas::CopyFrom(const MarkerBoardParmas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calibration.MarkerBoardParmas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkerBoardParmas::IsInitialized() const {
  return true;
}

void MarkerBoardParmas::Swap(MarkerBoardParmas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarkerBoardParmas::InternalSwap(MarkerBoardParmas* other) {
  using std::swap;
  swap(marker_number_, other->marker_number_);
  swap(board_length_e1_, other->board_length_e1_);
  swap(board_length_e2_, other->board_length_e2_);
  swap(board_length_b1_, other->board_length_b1_);
  swap(board_length_b2_, other->board_length_b2_);
  swap(marker_length_, other->marker_length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarkerBoardParmas::GetMetadata() const {
  protobuf_calibration_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace calibration
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calibration::Config* Arena::CreateMaybeMessage< ::calibration::Config >(Arena* arena) {
  return Arena::CreateInternal< ::calibration::Config >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calibration::RosbagParams* Arena::CreateMaybeMessage< ::calibration::RosbagParams >(Arena* arena) {
  return Arena::CreateInternal< ::calibration::RosbagParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calibration::LidarCalibParams* Arena::CreateMaybeMessage< ::calibration::LidarCalibParams >(Arena* arena) {
  return Arena::CreateInternal< ::calibration::LidarCalibParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calibration::CameraCalibParams* Arena::CreateMaybeMessage< ::calibration::CameraCalibParams >(Arena* arena) {
  return Arena::CreateInternal< ::calibration::CameraCalibParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calibration::MarkerBoardParmas* Arena::CreateMaybeMessage< ::calibration::MarkerBoardParmas >(Arena* arena) {
  return Arena::CreateInternal< ::calibration::MarkerBoardParmas >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
